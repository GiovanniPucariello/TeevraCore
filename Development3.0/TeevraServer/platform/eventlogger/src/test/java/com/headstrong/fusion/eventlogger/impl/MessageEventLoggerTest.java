/*
 * The information in this document is subject to change without notice and 
 * does not represent a commitment by Headstrong Corporation. The software 
 * and/or databases described in this document are furnished under a license 
 * agreement and may be used or copied only in accordance with the terms of 
 * the agreement. 
 * 
 * Copyright Â© 2008 Headstrong Corporation
 * All rights reserved.
 * 
 * $Id: MessageEventLoggerTest.java
 * $Revision: 
 * $Author: MBafna
 * $DateTime: Oct 16, 2008 
 */

package com.headstrong.fusion.eventlogger.impl;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.sql.Clob;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;

import com.headstrong.fusion.commons.FusionConstants;
import com.headstrong.fusion.eventlogger.beans.MessageEventLogBean;
import com.headstrong.fusion.services.dbpool.impl.DatabaseManager;
import com.headstrong.fusion.services.dbpool.impl.DbPool;

/**
 * 
 */
public class MessageEventLoggerTest {

	MessageEventLogger logger = null;
	private static String createMessageEventLogTable = "CREATE TABLE message_eventlog (  " +
			"message_eventlog_id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1)PRIMARY KEY,  " +
			"prcs_run_id bigint,  message_id bigint,  sequence_id bigint,  total_sequence bigint,  " +
			"savepoint_name varchar(50),  savepoint_time timestamp, log_message varchar(512)," +
			"created_by varchar(50), created_date timestamp, modified_by varchar(50), " +
			"modified_date timestamp, message_data LONGVARCHAR )";

	/**
	 * 
	 * @precondition
	 * @postcondition
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		logger = new MessageEventLogger();
		Map<String, String> props1 = new HashMap<String, String>();
		props1.put("database.driver.classname", "org.hsqldb.jdbcDriver");
		props1.put("database.username", "sa");
		props1.put("database.password", "");
		props1.put("database.url", "jdbc:hsqldb:mem:fusion_dbpool");
		props1.put("database.initialSize", "2");
		props1.put("database.maxActive", "5");
		props1.put("database.maxOpenActivePrep", "-1");
		props1.put("database.minEvictableIdleTimemillis", "60000");
		props1.put("database.timeBetweenEvictionRunsMillis", "300000");
		DbPool dbPool = DatabaseManager.setupDBPool(props1);
		DatabaseManager.registerDBPool(FusionConstants.FUSIONDB, dbPool);

	}

	protected void tearDown() throws Exception {
		DatabaseManager.shutdownDBPools();
	}

	public MessageEventLogBean setFields() {
		MessageEventLogBean bean = new MessageEventLogBean();
		bean.setSessionId("1");
		bean.setMessageId("1");
		bean.setSequenceId("1");
		bean.setTotalSequences("1");
		bean.setSavepointName("name");
		bean.setSavepointTime("12345");
		bean.setMessageData("test message");
		return bean;
	}

	public MessageEventLogBean setFields(String sessionId, String messageId,
			String sequenceId, String totalSequence, String savepointName,
			String savepointTime, String messageData) {
		MessageEventLogBean bean = new MessageEventLogBean();
		bean.setSessionId(sessionId);
		bean.setMessageId(messageId);
		bean.setSequenceId(sequenceId);
		bean.setTotalSequences(totalSequence);
		bean.setSavepointName(savepointName);
		bean.setSavepointTime(savepointTime);
		bean.setMessageData(messageData);
		return bean;
	}

	/**
	 * Test method for
	 * {@link com.headstrong.fusion.eventlogger.impl.MessageEventLogger#checkMandatoryFields(com.headstrong.fusion.eventlogger.beans.MessageEventLogBean)}.
	 */
	@Test
	public void testCheckSessionId() {
		MessageEventLogBean bean = setFields();
		bean.setSessionId(null);
		assertFalse(logger.checkMandatoryFields(bean));
		bean.setSessionId("abc");
		assertFalse(logger.checkMandatoryFields(bean));
		bean.setSessionId("123");
		assertTrue(logger.checkMandatoryFields(bean));
	}

	/**
	 * Test method for
	 * {@link com.headstrong.fusion.eventlogger.impl.MessageEventLogger#checkMandatoryFields(com.headstrong.fusion.eventlogger.beans.MessageEventLogBean)}.
	 */
	@Test
	public void testCheckMessageId() {
		MessageEventLogBean bean = setFields();
		bean.setMessageId(null);
		assertFalse(logger.checkMandatoryFields(bean));
		bean.setMessageId("abc");
		assertFalse(logger.checkMandatoryFields(bean));
		bean.setMessageId("123");
		assertTrue(logger.checkMandatoryFields(bean));
	}

	/**
	 * Test method for
	 * {@link com.headstrong.fusion.eventlogger.impl.MessageEventLogger#checkMandatoryFields(com.headstrong.fusion.eventlogger.beans.MessageEventLogBean)}.
	 */
	@Test
	public void testCheckSavepointName() {
		MessageEventLogBean bean = setFields();
		bean.setSavepointName(null);
		assertFalse(logger.checkMandatoryFields(bean));
		bean.setSavepointName("abc");
		assertTrue(logger.checkMandatoryFields(bean));
		bean.setSavepointName("123");
		assertTrue(logger.checkMandatoryFields(bean));
	}

	/**
	 * Test method for
	 * {@link com.headstrong.fusion.eventlogger.impl.MessageEventLogger#checkMandatoryFields(com.headstrong.fusion.eventlogger.beans.MessageEventLogBean)}.
	 */
	@Test
	public void testCheckSavepointTime() {
		MessageEventLogBean bean = setFields();
		bean.setSavepointTime(null);
		assertTrue(logger.checkMandatoryFields(bean));
		bean.setSavepointTime("abc");
		assertTrue(logger.checkMandatoryFields(bean));
		bean.setSavepointTime("12345");
		assertTrue(logger.checkMandatoryFields(bean));
		bean.setSavepointTime(Long.toString(Long.MAX_VALUE));
		assertTrue(logger.checkMandatoryFields(bean));
		bean.setSavepointTime(Long.toString(Long.MIN_VALUE));
		assertTrue(logger.checkMandatoryFields(bean));
		bean.setSavepointTime(Double.toString(Double.MAX_VALUE));
		assertTrue(logger.checkMandatoryFields(bean));

	}

	/**
	 * Test method for
	 * {@link com.headstrong.fusion.eventlogger.impl.MessageEventLogger#checkMandatoryFields(com.headstrong.fusion.eventlogger.beans.MessageEventLogBean)}.
	 */
	@Test
	public void testCheckSequenceId() {
		MessageEventLogBean bean = setFields();
		bean.setSavepointName(FusionConstants.DEFAULT_START_SP_NAME);
		bean.setSequenceId(null);
		assertTrue(logger.checkMandatoryFields(bean));
		bean.setSequenceId("abc");
		assertFalse(logger.checkMandatoryFields(bean));
		bean.setSequenceId("123");
		assertTrue(logger.checkMandatoryFields(bean));
		bean.setSavepointName(FusionConstants.DEFAULT_RECEIVED_SP_NAME);
		bean.setSequenceId(null);
		assertTrue(logger.checkMandatoryFields(bean));
		bean.setSequenceId("abc");
		assertTrue(logger.checkMandatoryFields(bean));

	}

	/**
	 * Test method for
	 * {@link com.headstrong.fusion.eventlogger.impl.MessageEventLogger#checkMandatoryFields(com.headstrong.fusion.eventlogger.beans.MessageEventLogBean)}.
	 */
	@Test
	public void testCheckTotalSequences() {
		MessageEventLogBean bean = setFields();
		bean.setSavepointName(FusionConstants.DEFAULT_START_SP_NAME);
		bean.setTotalSequences(null);
		assertTrue(logger.checkMandatoryFields(bean));
		bean.setTotalSequences("abc");
		assertFalse(logger.checkMandatoryFields(bean));
		bean.setTotalSequences("123");
		assertTrue(logger.checkMandatoryFields(bean));
		bean.setSavepointName(FusionConstants.DEFAULT_RECEIVED_SP_NAME);
		bean.setTotalSequences(null);
		assertTrue(logger.checkMandatoryFields(bean));
		bean.setTotalSequences("abc");
		assertTrue(logger.checkMandatoryFields(bean));

	}

	//@Test
	public void atestLog() throws Exception {
		DbPool pool = DatabaseManager.getInstance(FusionConstants.FUSIONDB);
		executeStatement(pool, createMessageEventLogTable);
		MessageEventLogBean bean;

		bean = setFields("1", "1", "1", "2", "STARTED", Long.toString(System
				.currentTimeMillis()), createMessageEventLogTable +"abc");
		logger.log(bean);

		bean = setFields("1", "1", "2", "2", "STARTED", Long.toString(System
				.currentTimeMillis()), createMessageEventLogTable +"def");
		logger.log(bean);

		bean = setFields("1", "1", "1", "2", "FINISHED", Long.toString(System
				.currentTimeMillis()), createMessageEventLogTable +"ghi") ;
		logger.log(bean);

		bean = setFields("1", "1", "2", "2", "FINISHED", Long.toString(System
				.currentTimeMillis()), createMessageEventLogTable +"xyz");
		logger.log(bean);

		Connection conn = pool.getConnection();
		ResultSet rs = conn
				.createStatement()
				.executeQuery(
						"select message_eventlog_id, prcs_run_id, message_id, "
								+ "sequence_id,total_sequence , savepoint_name,message_data from message_eventlog");
		assertNotNull(rs);
		List<Object[]> actual = new ArrayList<Object[]>();
		while (rs.next()) {
			List<Object> data = new ArrayList<Object>();
			data.add(rs.getString(1));
			data.add(rs.getString(2));
			data.add(rs.getString(3));
			data.add(rs.getString(4));
			data.add(rs.getString(5));
			data.add(rs.getString(6));
			Clob clob=rs.getClob(7);
			String actualClob=clob.getSubString(1, new Long(clob.length()).intValue());
			data.add(actualClob);
			actual.add(data.toArray());
		}

		rs.close();
		conn.close();

		assertEquals(4, actual.size());

		Object[][] expected = new Object[4][];
		expected[0] = new Object[] { "1", "1", "1", "1", "2", "STARTED" , createMessageEventLogTable +"abc"};
		expected[1] = new Object[] { "2", "1", "1", "2", "2", "STARTED" , createMessageEventLogTable+"def"};
		expected[2] = new Object[] { "3", "1", "1", "1", "2", "FINISHED" , createMessageEventLogTable+"ghi"} ;
		expected[3] = new Object[] { "4", "1", "1", "2", "2", "FINISHED" , createMessageEventLogTable+"xyz"};

		assertArrayEquals(expected, actual.toArray());

		executeStatement(pool, "drop table message_eventlog");

	}

	private void executeStatement(DbPool pool, String statement)
			throws Exception {
		Connection conn = pool.getConnection();
		Statement stmt = conn.createStatement();
		stmt.execute(statement);
		stmt.close();
		conn.close();
	}

}
