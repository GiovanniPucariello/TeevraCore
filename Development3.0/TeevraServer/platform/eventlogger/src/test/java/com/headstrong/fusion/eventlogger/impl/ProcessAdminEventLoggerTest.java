/*
 * The information in this document is subject to change without notice and 
 * does not represent a commitment by Headstrong Corporation. The software 
 * and/or databases described in this document are furnished under a license 
 * agreement and may be used or copied only in accordance with the terms of 
 * the agreement. 
 * 
 * Copyright Â© 2008 Headstrong Corporation
 * All rights reserved.
 * 
 * $Id: ProcessAdminEventLoggerTest.java
 * $Revision: 
 * $Author: MBafna
 * $DateTime: Oct 20, 2008 
 */

package com.headstrong.fusion.eventlogger.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.headstrong.fusion.commons.FusionConstants;
import com.headstrong.fusion.eventlogger.beans.ProcessEventLogBean;
import com.headstrong.fusion.services.dbpool.impl.DatabaseManager;
import com.headstrong.fusion.services.dbpool.impl.DbPool;
import com.headstrong.fusion.services.messageidgen.impl.MessageIdGenImpl;

/**
 * 
 */
public class ProcessAdminEventLoggerTest {

	private ProcessAdminEventLogger logger;

	private static String createprcsRuntimeTable = "create table process_runtime (  prcs_run_id bigint NOT NULL,"
			+ " prcs_id bigint,  prcs_ver_id bigint,  prcs_run_sequence integer,"
			+ "  prcs_run_status varchar(50) , prcs_run_start_time timestamp ,"
			+ " prcs_run_stop_time timestamp , prcs_msgs_recd bigint, prcs_msgs_error bigint,"
			+ " prcs_msgs_processed bigint, created_by varchar(50), created_date timestamp,"
			+ " modified_by varchar(50) DEFAULT 'system_user',modified_date timestamp )";

	private static String createPrcsRuntimeEventLogTable = "CREATE TABLE process_runtime_eventlog ("
			+ " prcs_run_eventlog_id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1)PRIMARY KEY,"
			+ "  prcs_run_id bigint, prcs_event_type varchar(25), prcs_event_time timestamp,"
			+ " prcs_event_source varchar(50), prcs_event_category varchar(50), prcs_event_desc varchar(500),"
			+ " prcs_msg LONGVARBINARY, created_by varchar(50), created_date timestamp,"
			+ " modified_by varchar(50), modified_date timestamp )";

	/**
	 * 
	 * @precondition
	 * @postcondition
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		logger = new ProcessAdminEventLogger();
		Map<String, String> props1 = new HashMap<String, String>();
		props1.put("database.driver.classname", "org.hsqldb.jdbcDriver");
		props1.put("database.username", "sa");
		props1.put("database.password", "");
		props1.put("database.url", "jdbc:hsqldb:mem:fusion_dbpool");
		props1.put("database.initialSize", "2");
		props1.put("database.maxActive", "5");
		props1.put("database.maxOpenActivePrep", "-1");
		props1.put("database.minEvictableIdleTimemillis", "60000");
		props1.put("database.timeBetweenEvictionRunsMillis", "300000");
		DbPool dbPool = DatabaseManager.setupDBPool(props1);
		DatabaseManager.registerDBPool(FusionConstants.FUSIONDB, dbPool);
		executeStatement(dbPool, createPrcsRuntimeEventLogTable);
		executeStatement(dbPool, createprcsRuntimeTable);
	}

	/**
	 * 
	 * @precondition
	 * @postcondition
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown() throws Exception {
		DbPool pool = DatabaseManager.getInstance(FusionConstants.FUSIONDB);
		executeStatement(pool, "drop table process_runtime_eventlog");
		executeStatement(pool, "drop table process_runtime");

		DatabaseManager.shutdownDBPools();
	}

	public ProcessEventLogBean setFields() {
		ProcessEventLogBean bean = new ProcessEventLogBean();
		bean.setSessionId("1");
		bean.setProcessId(1);
		bean.setProcessStatus("STARTED");
		return bean;
	}

	public ProcessEventLogBean setFields(String sessionId, int processId,
			String processStatus, String eventType, String eventSource,
			String eventCategory, String eventDesc) {
		ProcessEventLogBean bean = new ProcessEventLogBean();
		bean.setSessionId(sessionId);
		bean.setProcessId(processId);
		bean.setProcessStatus(processStatus);
		bean.setEventType(eventType);
		bean.setEventSource(eventSource);
		bean.setEventCategory(eventCategory);
		bean.setEventDesc(eventDesc);
		return bean;
	}

	//@Test
	public void atestLog() throws Exception {
		DbPool pool = DatabaseManager.getInstance(FusionConstants.FUSIONDB);
		MessageIdGenImpl messageIdGen = new MessageIdGenImpl(null);
		Connection conn = pool.getConnection();
		String sessionId1 = messageIdGen.getSessionId("1");
		String sessionId2 = messageIdGen.getSessionId("2");

		checkProcessStart(conn, sessionId1, "1");
		checkProcessStart(conn, sessionId2, "2");
		checkProcessStop(conn, sessionId1, "1");
		checkProcessStatusUpdate(conn, sessionId2, "2");
		checkProcessStop(conn, sessionId2, "2");

		conn.close();
	}

	public void checkProcessStart(Connection conn, String sessionId,
			String processId) throws Exception {
		ProcessEventLogBean bean = setFields(sessionId, 1,
				FusionConstants.PROCESS_STARTED, "INFO", "FUSION", "Started",
				"Dummy desc for start");
		logger.log(bean);
		ResultSet rs = conn
				.createStatement()
				.executeQuery(
						"select prcs_run_id,prcs_id, prcs_run_status,prcs_run_start_time, prcs_run_stop_time from process_runtime where prcs_run_id= "
								+ sessionId);
		assertNotNull(rs);
		if (rs.next()) {
			assertEquals(sessionId, rs.getString(1));
			assertEquals(processId, rs.getString(2));
			assertNotNull(rs.getString(3));
			assertNotNull(rs.getString(4)); // start time
			assertNull(rs.getString(5)); // end time
		}
		rs.close();
		checkLastEventLog(conn, sessionId, "INFO", "FUSION", "Started",
				"Dummy desc for start");

	}

	public void checkProcessStop(Connection conn, String sessionId,
			String processId) throws Exception {
		ProcessEventLogBean bean = setFields(sessionId, 1,
				FusionConstants.PROCESS_STOPPED, "INFO", "FUSION", "Stopped",
				"Dummy desc for stop");
		logger.log(bean);
		ResultSet rs = conn
				.createStatement()
				.executeQuery(
						"select prcs_run_id,prcs_id, prcs_run_status,prcs_run_start_time, prcs_run_stop_time from process_runtime where prcs_run_id= "
								+ sessionId);
		assertNotNull(rs);
		if (rs.next()) {
			assertEquals(sessionId, rs.getString(1));
			assertEquals(processId, rs.getString(2));
			assertNotNull(rs.getString(3));
			assertNotNull(rs.getString(4)); // start time
			assertNotNull(rs.getString(5)); // end time
		}
		rs.close();
		checkLastEventLog(conn, sessionId, "INFO", "FUSION", "Stopped",
				"Dummy desc for stop");

	}

	public void checkProcessStatusUpdate(Connection conn, String sessionId,
			String processId) throws Exception {
		ProcessEventLogBean bean = setFields(sessionId, 1, "Temp Update",
				"INFO", "FUSION", "Temp Update", "Dummy desc for update");
		logger.log(bean);
		ResultSet rs = conn
				.createStatement()
				.executeQuery(
						"select prcs_run_id,prcs_id, prcs_run_status,prcs_run_start_time, prcs_run_stop_time from process_runtime where prcs_run_id= "
								+ sessionId);
		assertNotNull(rs);
		if (rs.next()) {
			assertEquals(sessionId, rs.getString(1));
			assertEquals(processId, rs.getString(2));
			assertNotNull(rs.getString(3));
			assertNotNull(rs.getString(4)); // start time
			assertNull(rs.getString(5)); // end time
		}
		rs.close();

		checkLastEventLog(conn, sessionId, "INFO", "FUSION", "Temp Update",
				"Dummy desc for update");

	}

	public void checkLastEventLog(Connection conn, String sessionId,
			String eventType, String eventSource, String eventCat,
			String eventDesc) throws Exception {
		ResultSet rs = conn
				.createStatement()
				.executeQuery(
						"select prcs_run_eventlog_id, prcs_run_id, prcs_event_type, prcs_event_source, prcs_event_category, prcs_event_desc from process_runtime_eventlog order by prcs_run_eventlog_id desc");
		assertNotNull(rs);

		if (rs.next()) {
			assertNotNull(rs.getString(1));
			assertEquals(sessionId, rs.getString(2));
			assertEquals(eventType, rs.getString(3));
			assertEquals(eventSource, rs.getString(4));
			assertEquals(eventCat, rs.getString(5));
			assertEquals(eventDesc, rs.getString(6));

		}
		rs.close();

	}

	@Test
	public void testCheckSessionId() throws Exception {
		ProcessEventLogBean bean = setFields();
		bean.setSessionId(null);
		assertFalse(logger.checkMandatoryFields(bean));
		bean.setSessionId("abc");
		assertFalse(logger.checkMandatoryFields(bean));
		bean.setSessionId("123");
		assertTrue(logger.checkMandatoryFields(bean));
	}

	@Test
	public void testCheckProcessStatus() throws Exception {
		ProcessEventLogBean bean = setFields();
		bean.setProcessStatus(null);
		assertFalse(logger.checkMandatoryFields(bean));
		bean.setProcessStatus("STARTED");
		assertTrue(logger.checkMandatoryFields(bean));

	}

	private void executeStatement(DbPool pool, String statement)
			throws Exception {
		Connection conn = pool.getConnection();
		Statement stmt = conn.createStatement();
		stmt.execute(statement);
		stmt.close();
		conn.close();
	}

}
