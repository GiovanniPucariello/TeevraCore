#
# EvaluationContext.properties
#
# Contains standard function mappings.
#
# function.[function name]=[class implements Function]
#
# Remember that '=' signs need to be escaped if used in the function
# name, and that a '$' sign needs to be used to denote a nested class.
#

#
# Standard arithmetic functions
#
function.+=com.headstrong.fusion.commons.expression.evaluator.function.BinaryOperator$Add
#function.+=com.headstrong.fusion.commons.expression.evaluator.function.Summation
function.-=com.headstrong.fusion.commons.expression.evaluator.function.BinaryOperator$Subtract
#function.-=com.headstrong.fusion.commons.expression.evaluator.function.Difference
function.*=com.headstrong.fusion.commons.expression.evaluator.function.BinaryOperator$Multiply
function./=com.headstrong.fusion.commons.expression.evaluator.function.BinaryOperator$Divide
function.%=com.headstrong.fusion.commons.expression.evaluator.function.BinaryOperator$Modulus
#function.&&=com.headstrong.fusion.commons.expression.evaluator.function.BinaryOperator$And
function.&&=com.headstrong.fusion.commons.expression.evaluator.function.ShortCircuitAnd
#function.||=com.headstrong.fusion.commons.expression.evaluator.function.BinaryOperator$Or
function.||=com.headstrong.fusion.commons.expression.evaluator.function.ShortCircuitOr
function.>=com.headstrong.fusion.commons.expression.evaluator.function.BinaryOperator$Greater
function.<=com.headstrong.fusion.commons.expression.evaluator.function.BinaryOperator$Less
function.>\==com.headstrong.fusion.commons.expression.evaluator.function.BinaryOperator$GreaterEqual
function.<\==com.headstrong.fusion.commons.expression.evaluator.function.BinaryOperator$LessEqual
function.\==com.headstrong.fusion.commons.expression.evaluator.function.BinaryOperator$Equal
function.!\==com.headstrong.fusion.commons.expression.evaluator.function.BinaryOperator$NotEqual

#
# Logical functions (arbitrary arguments)
#
function.and=com.headstrong.fusion.commons.expression.evaluator.function.ShortCircuitAnd
function.or=com.headstrong.fusion.commons.expression.evaluator.function.ShortCircuitOr

#
# Other Math functions
#
function.abs=com.headstrong.fusion.commons.expression.evaluator.function.MathFunction$abs
function.acos=com.headstrong.fusion.commons.expression.evaluator.function.MathFunction$acos
function.asin=com.headstrong.fusion.commons.expression.evaluator.function.MathFunction$asin
function.atan=com.headstrong.fusion.commons.expression.evaluator.function.MathFunction$atan
function.ceil=com.headstrong.fusion.commons.expression.evaluator.function.MathFunction$ceil
function.cos=com.headstrong.fusion.commons.expression.evaluator.function.MathFunction$cos
function.exp=com.headstrong.fusion.commons.expression.evaluator.function.MathFunction$exp
function.floor=com.headstrong.fusion.commons.expression.evaluator.function.MathFunction$floor
function.log=com.headstrong.fusion.commons.expression.evaluator.function.MathFunction$log
function.rint=com.headstrong.fusion.commons.expression.evaluator.function.MathFunction$rint
function.sin=com.headstrong.fusion.commons.expression.evaluator.function.MathFunction$sin
function.sqrt=com.headstrong.fusion.commons.expression.evaluator.function.MathFunction$sqrt
function.tan=com.headstrong.fusion.commons.expression.evaluator.function.MathFunction$tan
function.toDegrees=com.headstrong.fusion.commons.expression.evaluator.function.MathFunction$toDegrees
function.toRadians=com.headstrong.fusion.commons.expression.evaluator.function.MathFunction$toRadians
function.max=com.headstrong.fusion.commons.expression.evaluator.function.MathFunction$max
function.min=com.headstrong.fusion.commons.expression.evaluator.function.MathFunction$min
function.pow=com.headstrong.fusion.commons.expression.evaluator.function.MathFunction$pow
function.random=com.headstrong.fusion.commons.expression.evaluator.function.MathFunction$random
function.heaviside=com.headstrong.fusion.commons.expression.evaluator.function.MathFunction$heaviside

#
# Conditional Functions
#
function.if=com.headstrong.fusion.commons.expression.evaluator.function.IfFunction

#
# Test functions
#
function.sum=com.headstrong.fusion.commons.expression.evaluator.function.Summation
function.sub=com.headstrong.fusion.commons.expression.evaluator.function.Difference
function.toString=com.headstrong.fusion.commons.expression.evaluator.function.IJWInvocation
function.equals=com.headstrong.fusion.commons.expression.evaluator.function.IJWInvocation
function.create=com.headstrong.fusion.commons.expression.evaluator.function.NewObjectFunction
function.call=com.headstrong.fusion.commons.expression.evaluator.function.CallFunction
function.set=com.headstrong.fusion.commons.expression.evaluator.function.SetVariableFunction
function.get=com.headstrong.fusion.commons.expression.evaluator.function.GetVariableFunction
function.show=com.headstrong.fusion.commons.expression.evaluator.function.VariablesFunction
function.isNull=com.headstrong.fusion.commons.expression.evaluator.function.IsNullFunction
function.length=com.headstrong.fusion.commons.expression.evaluator.function.LengthFunction

#
# String functions
#
function.substring=com.headstrong.fusion.commons.expression.evaluator.function.IJWInvocation
function.matches=com.headstrong.fusion.commons.expression.evaluator.function.IJWInvocation
function.concat=com.headstrong.fusion.commons.expression.evaluator.function.IJWInvocation
function.startsWith=com.headstrong.fusion.commons.expression.evaluator.function.IJWInvocation
function.endsWith=com.headstrong.fusion.commons.expression.evaluator.function.IJWInvocation
function.equalsIgnoreCase=com.headstrong.fusion.commons.expression.evaluator.function.IJWInvocation
function.trim=com.headstrong.fusion.commons.expression.evaluator.function.IJWInvocation

#
# Numeric functions
#
function.isNaN=com.headstrong.fusion.commons.expression.evaluator.function.IJWInvocation

#
# Constants
#
# constant.[constant name]=[value]
#
# The value specified can be anything like this:
# - The string "null", which gives it a null value.
# - A class field reference, like "java.lang.Boolean#FALSE" where
#   the part after the "#" is the name of a static field in the
#   class.
# - A constructor reference like "java.lang.Double(1.0)" where
#   the class takes a *single* String argument. The text between
#   the parentheses will be passed to that constructor
#   as the argument.
#
constant.null=null
constant.true=java.lang.Boolean#TRUE
constant.false=java.lang.Boolean#FALSE
constant.pi=java.lang.Math#PI
constant.e=java.lang.Math#E
constant.NaN=java.lang.Double#NaN
constant.POSITIVE_INFINITY=java.lang.Double#POSITIVE_INFINITY
constant.NEGATIVE_INFINITY=java.lang.Double#NEGATIVE_INFINITY

#
# Properties
#
# property.[property name]=[value]
#
# The value specified has the same semantics as values for
# constants (see above).
#
# The property name can also be used in the same way as a constant
# value, so you can specify a property like this:
#
# property.my.package.class#PROPERTY_FIELD=java.lang.Double(1.0)
#
property.com.headstrong.fusion.commons.expression.evaluator.function.MathFunction#ALLOW_NULL_COMPARISON=java.lang.Boolean#FALSE
property.com.headstrong.fusion.commons.expression.evaluator.function.MathFunction#NULL_RETURNS_NULL=java.lang.Boolean#TRUE
